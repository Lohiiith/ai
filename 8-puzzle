test(Plan) :- 
    write('Initial state:'), nl,
    Init = [at(empty, 1), at(tile8, 2), at(tile1, 3), at(tile5, 4), at(tile3, 5), at(tile2, 6), at(tile7, 7), at(tile4, 8), at(tile6, 9)],
    write_sol(Init),
    Goal = [at(tile1, 1), at(tile2, 2), at(tile3, 3), at(tile4, 4), at(tile5, 5), at(tile6, 6), at(tile7, 7), at(tile8, 8), at(empty, 9)],
    nl, write('Goal state:'), nl, write(Goal), nl, nl,
    solve(Init, Goal, Plan).

solve(State, Goal, Plan) :- 
    solve(State, Goal, [], Plan).

solve(State, Goal, Plan, Plan) :- 
    is_subset(Goal, State), nl, write_sol(Plan).

solve(State, Goal, Sofar, Plan) :- 
    act(Action, Preconditions, Delete, Add),
    is_subset(Preconditions, State),
    \+ member(Action, Sofar),
    delete_list(Delete, State, Remainder),
    append(Add, Remainder, NewState),
    solve(NewState, Goal, [Action | Sofar], Plan).

is_movable(X1, Y1) :- 
    (1 is X1 - Y1); 
    (-1 is X1 - Y1); 
    (3 is X1 - Y1); 
    (-3 is X1 - Y1).

act(move(X, Y, Z), [at(X, Y), at(empty, Z), is_movable(Y, Z)], [at(X, Y), at(empty, Z)], [at(X, Z), at(empty, Y)]).

is_subset([H | T], Set) :- 
    member(H, Set), is_subset(T, Set).

is_subset([], _).

delete_list([H | T], Curstate, Newstate) :- 
    remove(H, Curstate, Remainder), delete_list(T, Remainder, Newstate).

delete_list([], Curstate, Curstate).

remove(X, [X | T], T).

remove(X, [H | T], [H | R]) :- 
    remove(X, T, R).

write_sol([]).

write_sol([H | T]) :- 
    write_sol(T), write(H), nl.

append([H | T], L1, [H | L2]) :- 
    append(T, L1, L2).

append([], L, L).

member(X, [X | _]).

member(X, [_ | T]) :- 
    member(X, T).



















test(Plan).
